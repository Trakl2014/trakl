{
  "name": "urban-airship-push",
  "description": "An API wrapper for urban airship push notifications, based on API v3.",
  "version": "0.1.0",
  "homepage": "https://github.com/BrightSnowman/urban-airship-push",
  "author": {
    "name": "Alexander Kohout",
    "email": "alexanderkohout@gmail.com",
    "url": "alexanderkohout.de"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/BrightSnowman/urban-airship-push.git"
  },
  "bugs": {
    "url": "https://github.com/BrightSnowman/urban-airship-push/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/BrightSnowman/urban-airship-push/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/urban-airship-push",
  "engines": {
    "node": ">= 0.10.7"
  },
  "scripts": {
    "test": "grunt nodeunit"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt": "~0.4.1"
  },
  "keywords": [
    "urban airship",
    "push notification"
  ],
  "readme": "# urban-airship-push\n\nAn API wrapper for urban airship push notifications, based on Urban Airship\nPush API V3.\n\nThe wrapper is thought to support the complete Urban Airship Push API in\nits current version. Currently, only the push is supported (since it's the\nmost important one).\n\nThe following list shows which APIs are implemented at the moment:\n\n* Push API: Complete\n* Schedules API: Scheduled Push\n* Tag API: Not yet supported\n* Feed API: Not yet supported\n* Reports API: Not yet supported\n* Device Information API: Not yet supported\n* Device Registration API: Not yet supported\n* Segments API: Not yet supported\n\nIn version 3 you don't have to explicitly register devices if you're using the\nUrban Airship libraries on your mobile application. It will perform the\nregistration for you! Most of the APIs are nice to have and thus, currently\nthe focus lies on the good stuff: Sending Pushes.\n\n## Getting Started\nInstall the module with: `npm install urban-airship-push`\n\n```javascript\n// Require the module. The module provides a constructor function as main\n// entry object.\nvar UrbanAirshipPush = require('urban-airship-push.js');\n\n// Your app access configuration. You will find this stuff in your App\n// Settings under App Key, App Secret and App Master Secret.\nvar config = {\n    key: 'XXX',\n    secret: 'YYY',\n    masterSecret: 'ZZZ'\n};\n\n// Create a push object\nvar urbanAirshipPush = new UrbanAirshipPush(testConfig);\n```\n\n## Documentation\n\nThe module provides a constructor function, which provides the following\nfunctionality after instantiating.\n\n### API Objects\n\nThe constructor encapsulates all Urban Airship Push APIs,\nwhich are itself encapsulated in a separate object. The following objects are\n available:\n\n```javascript\nvar UrbanAirshipPush = require('urban-airship-push.js');\nvar config = {\n    key: 'XXX',\n    secret: 'YYY',\n    masterSecret: 'ZZZ'\n};\nvar urbanAirshipPush = new UrbanAirshipPush(testConfig);\n\n// urbanAirshipPush.deviceInformation represents the Device Information API\n// urbanAirshipPush.deviceRegistration represents the Device Registration API\n// urbanAirshipPush.feed represents the Feed API\n// urbanAirshipPush.location represents the Location API\n// urbanAirshipPush.push represents the Push API\n// urbanAirshipPush.reports represents the Reports API\n// urbanAirshipPush.schedule represents the Schedules API\n// urbanAirshipPush.segments represents the Segments API\n// urbanAirshipPush.tag represents the Tag API\n```\n\n### Push API: Validate\n\nThe Push API currently implements the following methods.\n\n```javascript\nvar UrbanAirshipPush = require('urban-airship-push.js');\nvar config = {\n    key: 'XXX',\n    secret: 'YYY',\n    masterSecret: 'ZZZ'\n};\nvar urbanAirshipPush = new UrbanAirshipPush(testConfig);\n\n/**\n * Validate the push data to see whether the structure is ok.\n *\n * See http://docs.urbanairship.com/reference/api/v3/push.html#validate\n * for more information.\n *\n * @param pushData An object that is send for validation.\n * @param callback A callback function that is called after the request\n * has been made. It will receive as first parameter an error object in\n * case of an error, or null if everything worked out well. The second\n * parameter will be the answer returned by the Urban Airship API.\n */\nurbanAirshipPush.push.validate(pushData, callback);\n```\n\n### Push API: Push\n\nThe Push API currently implements the following methods.\n\n```javascript\nvar UrbanAirshipPush = require('urban-airship-push.js');\nvar config = {\n    key: 'XXX',\n    secret: 'YYY',\n    masterSecret: 'ZZZ'\n};\nvar urbanAirshipPush = new UrbanAirshipPush(testConfig);\n\n/**\n * Send a push notification immediately to your receivers.\n *\n * See http://docs.urbanairship.com/reference/api/v3/push.html#push\n * for more information.\n *\n * @param pushData An object that is send to the receivers.\n * @param callback A callback function that is called after the request\n * has been made. It will receive as first parameter an error object in\n * case of an error, or null if everything worked out well. The second\n * parameter will be the answer returned by the Urban Airship API.\n */\nurbanAirshipPush.push.send(pushData, callback);\n```\n\n### Schedules API: Push\n\nThe Push API currently implements the following methods.\n\n```javascript\nvar UrbanAirshipPush = require('urban-airship-push.js');\nvar config = {\n    key: 'XXX',\n    secret: 'YYY',\n    masterSecret: 'ZZZ'\n};\nvar urbanAirshipPush = new UrbanAirshipPush(testConfig);\n\n/**\n * Send the scheduled push data to the UA Api.\n *\n * See http://docs.urbanairship.com/reference/api/v3/schedule.html#schedule-a-notification\n * for more information.\n *\n * @param pushData An object that is send to the schedules push.\n * @param callback A callback function that is called after the request\n * has been made. It will receive as first parameter an error object in\n * case of an error, or null if everything worked out well. The second\n * parameter will be the answer returned by the Urban Airship API.\n */\nurbanAirshipPush.schedule.push(pushData, callback);\n```\n\n## Examples\n\nAll code snippets can be copied & pasted and should work out of the box. You\nonly have to enter your app's credentials.\n\n### Push API\n\nSend a Push Notification to your people: (see http://docs.urbanairship.com/reference/api/v3/push.html#push for API details)\n\n```javascript\nvar UrbanAirshipPush = require('urban-airship-push.js');\nvar config = {\n    key: 'XXX',\n    secret: 'YYY',\n    masterSecret: 'ZZZ'\n};\nvar urbanAirshipPush = new UrbanAirshipPush(testConfig);\n\nvar pushInfo = {\n    device_types: 'all',\n    audience: 'all',\n    notification: {\n        alert: 'Blubb blub bla'\n    }\n};\n\nurbanAirshipPush.push.send(pushInfo, function (err, data) {\n    if (err) {\n        // Handle error\n        return;\n    }\n\n    console.log(data);\n});\n```\n\nValidate your Push Notification information before you send:\n(http://docs.urbanairship.com/reference/api/v3/push.html#validate for API details)\n\n```javascript\nvar UrbanAirshipPush = require('urban-airship-push.js');\nvar config = {\n    key: 'XXX',\n    secret: 'YYY',\n    masterSecret: 'ZZZ'\n};\nvar urbanAirshipPush = new UrbanAirshipPush(testConfig);\n\nvar pushInfo = {\n    device_types: 'all',\n    audience: 'all',\n    notification: {\n        alert: 'Blubb blub bla'\n    }\n};\n\nurbanAirshipPush.push.validate(pushInfo, function (err, data) {\n    if (err) {\n        // Handle error\n        return;\n    }\n\n    console.log(data);\n});\n```\n\n### Schedules API\n\nSend a scheduled push notification: (see http://docs.urbanairship.com/reference/api/v3/schedule.html#schedule-a-notification for more details)\n\n```javascript\nvar UrbanAirshipPush = require('urban-airship-push.js');\nvar config = {\n    key: 'XXX',\n    secret: 'YYY',\n    masterSecret: 'ZZZ'\n};\nvar urbanAirshipPush = new UrbanAirshipPush(testConfig);\n\nvar scheduleData = {\n    \"schedule\" : {\n        \"local_scheduled_time\" : \"2015-04-01T12:00:00\"\n    },\n    \"push\" : {\n        \"audience\" : \"all\",\n        \"notification\" : { \"alert\" : \"OH HAI FUTURE PEOPLEZ\" },\n        \"device_types\" : \"all\"\n    }\n};\n\nurbanAirshipPush.schedule.push(scheduleData, function (err, data) {\n    if (err) {\n        // Handle error\n        return;\n    }\n\n    console.log(data);\n});\n```\n\n## Contributing\n\nAny contributions to complete the API wrapper are warmly welcome!\n\n* Fork the repo and implement the missing functionality\n* There are stub objects for all APIs supported by Urban Airship. Use these\nstubs in the same style the push and the schedule API have been implemented.\n* Write a nodeunit test for your functionality in the urban-airship-push_test\n.js file. You can use the provided test credentials, it's a dummy account.\n* Send your implemented functionality as Pull Request.\n\n\n## Release History\n\n### 0.1.0 15.11.2013\n\nInit Release. Supported APIs:\n* Push API: Complete\n* Schedules API: Scheduled Push\n* Stub Objects for all other APIs\n\n## License\n\nCopyright (c) 2013 Alexander Kohout\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "urban-airship-push@0.1.0",
  "dist": {
    "shasum": "c8d5eee05b3e16942dcf6e040f5edb5d84f47503"
  },
  "_from": "urban-airship-push@",
  "_resolved": "https://registry.npmjs.org/urban-airship-push/-/urban-airship-push-0.1.0.tgz"
}
